/*************************************************************/

//NOTE - 모듈과 네임스페이스 🔥
// : 코드의 조직화를 돕는 기능
// : 모듈 => 파일 단위로 코드를 나누어 재사용성을 높임
// : 네임스페이스 => 코드의 논리적 그룹화를 통해 이름 충돌을 방지

/*************************************************************/

//NOTE - 모듈
// : TypeScript에서는 모듈을 사용하여 코드를 파일 단위로 분리하고 관리
// : export와 import 키워드를 사용하여 정의
// : 복잡한 프로젝트에서 사용

// math.ts
// : 모듈을 사용하면 코드를 독립적인 파일로 분리하여 관리
// : 필요한 모듈만 선택적으로 불러와 사용
export function add(a: number, b: number): number {
  return a + b
}

export function subtract(a: number, b: number): number {
  return a - b
}

// app.ts
import { add, subtract } from './math'

console.log(add(2, 3)) // 5
console.log(subtract(5, 3)) // 2

//NOTE - 네임스페이스(모듈화)
// : 코드의 논리적 그룹화를 통해 이름 충돌을 방지
// : 관련된 코드를 하나의 단위로 묶는 데 사용

// : 작은 프로젝트나 라이브러리에서 사용
namespace MathUtils {
  export function add(a: number, b: number): number {
    return a + b
  }

  export function subtract(a: number, b: number): number {
    return a - b
  }
}

console.log(MathUtils.add(2, 3)) // 5
console.log(MathUtils.subtract(5, 3)) // 2

//NOTE - 모듈 보강(declare)
// : 기존 모듈을 확장하여 새로운 기능을 추가하는 방법
// : declare module 키워드를 사용하여 모듈 보강
// : 외부 라이브러리(js)에서 제공하는 타입이 부족하다면 확장하거나 커스터마이즈

// 외부 라이브러리에서 가져온 모듈
import 'some-library'

// 모듈 보강
declare module 'some-library' {
  export interface SomeType {
    newProperty: string
  }
}

// 이제 보강된 타입을 사용할 수 있습니다
import { SomeType } from 'some-library'

const obj: SomeType = { newProperty: 'Hello' }

//NOTE - 글로벌 타입과 declare(타입 선언)
// : 전역 범위에서 사용할 수 있는 타입을 정의
// : declare 키워드를 사용하여 전역 타입을 선언

// : 글로벌 타입 선언을 통해 전역 객체나 변수에 커스텀 타입을 추가할 수 있으며
// : declare 키워드는 TypeScript에게 해당 타입이 이미 존재한다고 알려주는 역할

// 글로벌 타입 선언
declare global {
  interface Window {
    myCustomProperty: string
  }
}

// 글로벌 타입 사용
window.myCustomProperty = 'Hello World'
console.log(window.myCustomProperty) // Hello World
